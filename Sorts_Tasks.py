# =========================================
# =========================================
# BASIC SORTING AND SEARCHING TASKS
# =========================================

# Task 1: Linear Search
# Implement a function that performs a linear search to find a target element in a list of integers.
# Return the index of the element if found, or -1 if not found.
# ---

myList = [77, 43, 54, 39, 26, 16, 7, 10, 27, 18, 35, 54, 66, 45, 43, 54, 54, 71, 9, 39, 7, 3, 16, 48, 7, 24, 
 6, 19, 17, 61, 85, 28, 54, 100, 80, 34, 2, 65, 19, 84, 27, 61, 40, 34, 52, 42, 50, 66, 4, 58, 59,
 90, 25, 40, 63, 15, 99, 99, 90, 10, 67, 31, 31, 57, 82, 83, 59, 70, 90, 53, 69, 12, 54, 39, 76, 63, 
 26, 75, 47, 71, 80, 68, 61, 34, 10, 70, 8, 85, 43, 15, 17, 100, 72, 83, 59, 74, 26, 71, 98, 81]


def linear_search(myList, target):
    for index in range(len(myList)):
        if myList[index] == target:
            return index
    return -1

target = int(input("Enter the number you wish to find: "))

result = linear_search(myList, target)

if result != -1:
    print(f"Element found at index: {result}")
else:
    print("Element not found in the myListay")

# Task 2: Binary Search
# Implement a function that performs a binary search to find a target element in a sorted list of integers.
# Return the index of the element if found, or -1 if not found.
# ---

def binary_search(myList, target):
    myList.sort()
    left, right = 0, len(myList) - 1
    while left <= right:
        mid = (left + right) // 2
        if myList[mid] == target:
            return mid
        elif myList[mid] < target:
            left = mid + 12
        else:
            right = mid - 1
    return -1

target = int(input("Enter the number you'd like to look for (binary search): "))
index = binary_search(myList, target)

if index != -1:
    print(f"Number found at index: {index} (binary search)")
else:
    print("Number not found (binary search).")

# Task 3: Bubble Sort
# Write a function that sorts a list of integers using the bubble sort algorithm.
# Print the sorted list.
# ---

myList = [77, 43, 54, 39, 26, 16, 7, 10, 27, 18, 35, 54, 66, 45, 43, 54, 54, 71, 9, 39, 7, 3, 16, 48, 7, 24, 
 6, 19, 17, 61, 85, 28, 54, 100, 80, 34, 2, 65, 19, 84, 27, 61, 40, 34, 52, 42, 50, 66, 4, 58, 59,
 90, 25, 40, 63, 15, 99, 99, 90, 10, 67, 31, 31, 57, 82, 83, 59, 70, 90, 53, 69, 12, 54, 39, 76, 63, 
 26, 75, 47, 71, 80, 68, 61, 34, 10, 70, 8, 85, 43, 15, 17, 100, 72, 83, 59, 74, 26, 71, 98, 81]

def bubble_sort(myList):

    for n in range(len(myList) - 1, 0, -1):

        for i in range(n):
            if myList[i] > myList[i + 1]:

                # Swap elements if they are in the wrong order
                swapped = True
                myList[i], myList[i + 1] = myList[i + 1], myList[i]

print("Unsorted list is:")
print(myList)

bubble_sort(myList)

print("Sorted list is:")
print(myList)



# Task 4: Selection Sort
# Write a function that sorts a list of integers using the selection sort algorithm.
# Print the sorted list.


integers = [553, 1766, 6774, 8323, 5491, 5040, 2234, 3433, 3108, 387, 2254, 1696, 9546,
             7731, 4866, 6378, 9842, 569, 4340, 431, 4783, 6605, 3169, 5409, 7937, 9330, 3444, 
             1903, 3846, 2280, 3688, 5712, 4525, 8830, 5487, 1581, 2981, 5273, 7422, 9833, 8173, 
             7554, 691, 5128, 8305, 9202, 315, 4370, 4168, 9367, 2201, 4172, 2809, 5118, 3998, 
             2179, 510, 6407, 7268, 3499, 7524, 8569, 4141, 3801, 4186, 79, 1511, 5457, 2411, 
             1629, 6982, 3609, 6665, 3342, 8568, 2680, 9407, 9002, 7418, 9940, 2982, 356, 2452, 
             7300, 9371, 4797, 9919, 7625, 54, 7807, 3058, 1534, 7132, 1583, 4019, 5877, 1043, 
             2007, 3606, 6063, 5881, 1862, 8634, 5065, 5578, 727, 3919, 4503, 8656, 2471, 9496, 
             8562, 3146, 5749, 3089, 9152, 3770, 573, 5006, 5180, 8695, 213, 7298, 823, 3249, 
             8320, 8904, 8898, 9724, 2696, 1569, 507, 2359, 1935, 9060, 5404, 7888, 9801, 8605, 
             6286, 760, 847, 3783, 2044, 3597, 4624, 9983, 9040, 4306, 4246, 8654, 9830, 8504, 4497, 
             2915, 1145, 7988, 1179, 5817, 5347, 5556, 1110, 5187, 1758, 8498, 8828, 3182, 5513, 1544, 
             8181, 3554, 3587, 9455, 983, 9369, 8580, 5750, 5038, 1706, 5987, 651, 1723, 8737, 4439, 6230, 
             7518, 231, 9574, 2599, 2130, 9895, 1680, 399, 3690, 5469, 7349, 8759, 8335, 5546, 6266, 2424, 
             9169, 6425, 5924, 5481, 6107, 3412, 8079, 4255, 8207, 1105, 2439, 2694, 9971, 8212, 1266, 6672, 
             4766, 4284, 7086, 3924, 8413, 6039, 6565, 9192, 45, 9272, 6475, 9945, 3899, 4499, 1001, 6066, 
             9723, 6348, 7152, 4849, 5834, 5572, 10, 4607, 6968, 9099, 9267, 7549, 5997, 6312, 6580, 3294, 6049, 
             2294, 6384, 2965, 46, 3979, 7083, 1889, 5434, 2340, 2514, 7545, 9634, 6243, 127, 4053, 9045, 1121, 872, 
             2430, 9468, 3245, 6158, 8085, 3570, 5532, 3729, 257, 8988, 5719, 2099, 5266, 6945, 2598, 2563, 7599, 3492, 
             2124, 1691, 1798, 8510, 7466, 4377, 4498, 3109, 2701, 2152, 1091, 5446, 9831, 1532, 676, 6520, 1276, 3542, 
             6078, 249, 5197, 5587, 8170, 2262, 9561, 6325, 1958, 2307, 8644, 7275, 7210, 3847, 3375, 5846, 7771, 5523, 
             8796, 6779, 3735, 1563, 6474, 9142, 8719, 7513, 5866, 5541, 9788, 3242, 2288, 9373, 4237, 2353, 7103, 8790, 
             1491, 8379, 8253, 6626, 20, 2576, 3252, 9383, 1580, 2145, 3410, 9645, 9514, 5554, 5698, 2315, 2763, 8470, 6080, 
             6912, 8522, 4017, 7872, 5142, 6472, 4554, 6841, 4033, 6068, 3156, 2065, 7326, 8468, 9606, 2729, 6005, 1621, 503, 
             2934, 4327, 1309, 1699, 5818, 3172, 6748, 640, 292, 8114, 8127, 2199, 2419, 8068, 6734, 23, 8386, 8938, 3513, 9256, 
             9006, 5928, 9611, 4845, 3402, 2823, 7027, 5789, 1416, 1802, 4922, 5658, 7911, 601, 9690, 5716, 4092, 7836, 5505, 597, 
             9034, 7320, 9136, 3445, 4307, 5030, 7486, 5809, 7656, 7597, 1969, 4949, 6691, 7307, 8544, 9498, 4071, 7987, 9075, 480, 
             5648, 2781, 3071, 2928, 6719, 1455, 4369, 2759, 3568, 4147, 8622, 5918, 1115, 5599, 833, 8786, 3971, 4196, 7416, 5435, 
             1186, 5976, 9839, 8176, 6308, 3966, 6623, 1731, 525, 721, 124, 6983, 4731, 3961, 2228, 2550, 9113, 976, 1234, 899, 4136, 
             7274, 997, 6035, 9977, 3972, 878, 7257, 4918, 4459, 164, 8337, 532, 107, 624, 8483, 8089, 944, 2948, 2165, 3127, 7644, 4372, 
             4934, 59, 6099, 5422, 6643, 8417, 9194, 3408, 2657, 4664, 2323, 3900, 7458, 8973, 8381, 1718, 6671, 4134, 5517, 7500, 1873, 
             3593, 3106, 1210, 3218, 4067, 7362, 8525, 5185, 5014, 1730, 6836, 6054, 7278, 1775, 1294, 8454, 9081, 6441, 5181, 3067, 3683,
               8783, 1974, 3687, 1138, 1813, 3615, 3051, 1685, 9951, 6909, 9780, 4337, 3600, 32, 2020, 5478, 6044, 3536, 9191, 1239, 8661, 
               8890, 4428, 5635, 2088, 5209, 3284, 1170, 1112, 158, 6450, 5217, 9221, 7812, 5927, 5307, 5339, 3359, 4617, 5982, 5693, 715,
             9442, 5004, 1104, 4974, 6925, 5864, 8535, 441, 3569, 5948, 4384, 9748, 9592, 850, 9429, 2534, 7, 7188, 2718, 4244, 9715, 
             2600, 5586, 5590, 5186, 5942, 8539, 1858, 9073, 8380, 1625, 5612, 253, 6013, 1456, 3875, 6829, 8402, 9935, 3740, 9287, 926, 
             5617, 9150, 8167, 5640, 2015, 7425, 4516, 3133, 7397, 7757, 8763, 8683, 1626, 4774, 5990, 5263, 7259, 5194, 7742, 324, 2488, 
             5685, 578, 1832, 9817, 2397, 1933, 541, 5332, 5477, 7908, 6860, 3411, 3378, 5740, 7894, 1099, 9390, 266, 5017, 8699, 3018, 
             6194, 1187, 4983, 2196, 1077, 9423, 5867, 9652, 4522, 6835, 9189, 1161, 8967, 2921, 746, 6662, 3767, 5306, 2123, 8445, 7311, 
             9494, 4724, 1061, 7588, 2640, 104, 9441, 7983, 8287, 1884, 778, 8046, 9091, 2676, 9167, 8095, 5395, 1479, 6007, 6512, 8986, 
             9151, 4612, 5375, 3393, 172, 6402, 2495, 558, 5365, 2089, 4155, 2138, 4052, 5688, 7967, 1752, 354, 5222, 3628, 3585, 4184, 
             9195, 9915, 2155, 6267, 9437, 8526, 987, 6009, 6200, 6578, 6795, 1381, 596, 7571, 2519, 5083, 6957, 3270, 4888, 3928, 1624, 
             2210, 2943, 6703, 6371, 8958, 190, 9473, 9266, 5037, 3510, 8733, 2808, 1446, 6284, 589, 9311, 3383, 822, 3460, 3870, 8383, 
             1042, 6872, 486, 8862, 6855, 1970, 9370, 8377, 5242, 852, 9119, 4342, 8423, 6179, 3150, 6263, 3644, 8261, 4608, 3368, 368, 
             4568, 516, 8134, 1649, 536, 4576, 3632, 8928, 58, 7357, 3267, 389, 5442, 4577, 1936, 3265, 4604, 3080, 7343, 88, 2662, 8425, 
             9989, 1073, 3988, 757, 2132, 4552, 6166, 9158, 8597, 4650, 3816, 3975, 2976, 1087, 2384, 4956, 920, 1484, 4697, 2303, 3309, 
             8473, 429, 9450, 3612, 8116, 8642, 9822, 2052, 1840, 6792, 9987, 3505, 6043, 4902, 9804, 2661, 3476, 4272, 7925, 3235, 7057, 
             8458, 4732, 216, 8888, 9268, 8496, 9853, 3464, 4038, 6326, 2388, 4628, 8009, 5917, 3908, 9746, 548, 8915, 1736, 2743, 7769, 
             5454, 6593, 2937, 4130, 293, 5983, 9733, 9297, 8735, 7039, 8620, 3167, 9047, 4241, 1486, 4796, 9257, 690, 6081, 748, 2301, 
             9898, 5830, 919, 8228, 3990, 3881, 2775, 3005, 5199, 2019, 8388, 6606, 1780, 680, 4733, 6403, 6074, 7735, 5380, 4358, 8528, 
             9927, 1944, 8399, 2994, 16, 5183, 7737, 8205, 5265, 1174, 8092, 2453, 8811, 7335, 6532, 7907, 9916, 8944, 3511, 5127, 5904, 
             5746, 9474, 1247, 4119, 7566, 9118, 2164, 1637, 6319, 7054, 1934, 1130, 8758, 4985, 1214, 497, 5762, 7387, 6619, 576, 6985, 
             917, 5967, 3048, 2961, 8623, 3674, 201, 8787, 5267, 7613, 6289, 1230, 9021, 228, 6596, 7219, 868, 6658, 3280, 4180, 3886, 
             9623, 2427, 7435, 5777, 410, 765, 7765, 9251, 9600, 2004, 9285, 408, 1444, 7637, 3310]

integers.sort()
print(integers)

# Task 5: Insertion Sort
# Write a function that sorts a list of integers using the insertion sort algorithm.
# Print the sorted list.
# ---

integers = [553, 1766, 6774, 8323, 5491, 5040, 2234, 3433, 3108, 387, 2254, 1696, 9546,
             7731, 4866, 6378, 9842, 569, 4340, 431, 4783, 6605, 3169, 5409, 7937, 9330, 3444, 
             1903, 3846, 2280, 3688, 5712, 4525, 8830, 5487, 1581, 2981, 5273, 7422, 9833, 8173, 
             7554, 691, 5128, 8305, 9202, 315, 4370, 4168, 9367, 2201, 4172, 2809, 5118, 3998, 
             2179, 510, 6407, 7268, 3499, 7524, 8569, 4141, 3801, 4186, 79, 1511, 5457, 2411, 
             1629, 6982, 3609, 6665, 3342, 8568, 2680, 9407, 9002, 7418, 9940, 2982, 356, 2452, 
             7300, 9371, 4797, 9919, 7625, 54, 7807, 3058, 1534, 7132, 1583, 4019, 5877, 1043, 
             2007, 3606, 6063, 5881, 1862, 8634, 5065, 5578, 727, 3919, 4503, 8656, 2471, 9496, 
             8562, 3146, 5749, 3089, 9152, 3770, 573, 5006, 5180, 8695, 213, 7298, 823, 3249, 
             8320, 8904, 8898, 9724, 2696, 1569, 507, 2359, 1935, 9060, 5404, 7888, 9801, 8605, 
             6286, 760, 847, 3783, 2044, 3597, 4624, 9983, 9040, 4306, 4246, 8654, 9830, 8504, 4497, 
             2915, 1145, 7988, 1179, 5817, 5347, 5556, 1110, 5187, 1758, 8498, 8828, 3182, 5513, 1544, 
             8181, 3554, 3587, 9455, 983, 9369, 8580, 5750, 5038, 1706, 5987, 651, 1723, 8737, 4439, 6230, 
             7518, 231, 9574, 2599, 2130, 9895, 1680, 399, 3690, 5469, 7349, 8759, 8335, 5546, 6266, 2424, 
             9169, 6425, 5924, 5481, 6107, 3412, 8079, 4255, 8207, 1105, 2439, 2694, 9971, 8212, 1266, 6672, 
             4766, 4284, 7086, 3924, 8413, 6039, 6565, 9192, 45, 9272, 6475, 9945, 3899, 4499, 1001, 6066, 
             9723, 6348, 7152, 4849, 5834, 5572, 10, 4607, 6968, 9099, 9267, 7549, 5997, 6312, 6580, 3294, 6049, 
             2294, 6384, 2965, 46, 3979, 7083, 1889, 5434, 2340, 2514, 7545, 9634, 6243, 127, 4053, 9045, 1121, 872, 
             2430, 9468, 3245, 6158, 8085, 3570, 5532, 3729, 257, 8988, 5719, 2099, 5266, 6945, 2598, 2563, 7599, 3492, 
             2124, 1691, 1798, 8510, 7466, 4377, 4498, 3109, 2701, 2152, 1091, 5446, 9831, 1532, 676, 6520, 1276, 3542, 
             6078, 249, 5197, 5587, 8170, 2262, 9561, 6325, 1958, 2307, 8644, 7275, 7210, 3847, 3375, 5846, 7771, 5523, 
             8796, 6779, 3735, 1563, 6474, 9142, 8719, 7513, 5866, 5541, 9788, 3242, 2288, 9373, 4237, 2353, 7103, 8790, 
             1491, 8379, 8253, 6626, 20, 2576, 3252, 9383, 1580, 2145, 3410, 9645, 9514, 5554, 5698, 2315, 2763, 8470, 6080, 
             6912, 8522, 4017, 7872, 5142, 6472, 4554, 6841, 4033, 6068, 3156, 2065, 7326, 8468, 9606, 2729, 6005, 1621, 503, 
             2934, 4327, 1309, 1699, 5818, 3172, 6748, 640, 292, 8114, 8127, 2199, 2419, 8068, 6734, 23, 8386, 8938, 3513, 9256, 
             9006, 5928, 9611, 4845, 3402, 2823, 7027, 5789, 1416, 1802, 4922, 5658, 7911, 601, 9690, 5716, 4092, 7836, 5505, 597, 
             9034, 7320, 9136, 3445, 4307, 5030, 7486, 5809, 7656, 7597, 1969, 4949, 6691, 7307, 8544, 9498, 4071, 7987, 9075, 480, 
             5648, 2781, 3071, 2928, 6719, 1455, 4369, 2759, 3568, 4147, 8622, 5918, 1115, 5599, 833, 8786, 3971, 4196, 7416, 5435, 
             1186, 5976, 9839, 8176, 6308, 3966, 6623, 1731, 525, 721, 124, 6983, 4731, 3961, 2228, 2550, 9113, 976, 1234, 899, 4136, 
             7274, 997, 6035, 9977, 3972, 878, 7257, 4918, 4459, 164, 8337, 532, 107, 624, 8483, 8089, 944, 2948, 2165, 3127, 7644, 4372, 
             4934, 59, 6099, 5422, 6643, 8417, 9194, 3408, 2657, 4664, 2323, 3900, 7458, 8973, 8381, 1718, 6671, 4134, 5517, 7500, 1873, 
             3593, 3106, 1210, 3218, 4067, 7362, 8525, 5185, 5014, 1730, 6836, 6054, 7278, 1775, 1294, 8454, 9081, 6441, 5181, 3067, 3683,
               8783, 1974, 3687, 1138, 1813, 3615, 3051, 1685, 9951, 6909, 9780, 4337, 3600, 32, 2020, 5478, 6044, 3536, 9191, 1239, 8661, 
               8890, 4428, 5635, 2088, 5209, 3284, 1170, 1112, 158, 6450, 5217, 9221, 7812, 5927, 5307, 5339, 3359, 4617, 5982, 5693, 715,
             9442, 5004, 1104, 4974, 6925, 5864, 8535, 441, 3569, 5948, 4384, 9748, 9592, 850, 9429, 2534, 7, 7188, 2718, 4244, 9715, 
             2600, 5586, 5590, 5186, 5942, 8539, 1858, 9073, 8380, 1625, 5612, 253, 6013, 1456, 3875, 6829, 8402, 9935, 3740, 9287, 926, 
             5617, 9150, 8167, 5640, 2015, 7425, 4516, 3133, 7397, 7757, 8763, 8683, 1626, 4774, 5990, 5263, 7259, 5194, 7742, 324, 2488, 
             5685, 578, 1832, 9817, 2397, 1933, 541, 5332, 5477, 7908, 6860, 3411, 3378, 5740, 7894, 1099, 9390, 266, 5017, 8699, 3018, 
             6194, 1187, 4983, 2196, 1077, 9423, 5867, 9652, 4522, 6835, 9189, 1161, 8967, 2921, 746, 6662, 3767, 5306, 2123, 8445, 7311, 
             9494, 4724, 1061, 7588, 2640, 104, 9441, 7983, 8287, 1884, 778, 8046, 9091, 2676, 9167, 8095, 5395, 1479, 6007, 6512, 8986, 
             9151, 4612, 5375, 3393, 172, 6402, 2495, 558, 5365, 2089, 4155, 2138, 4052, 5688, 7967, 1752, 354, 5222, 3628, 3585, 4184, 
             9195, 9915, 2155, 6267, 9437, 8526, 987, 6009, 6200, 6578, 6795, 1381, 596, 7571, 2519, 5083, 6957, 3270, 4888, 3928, 1624, 
             2210, 2943, 6703, 6371, 8958, 190, 9473, 9266, 5037, 3510, 8733, 2808, 1446, 6284, 589, 9311, 3383, 822, 3460, 3870, 8383, 
             1042, 6872, 486, 8862, 6855, 1970, 9370, 8377, 5242, 852, 9119, 4342, 8423, 6179, 3150, 6263, 3644, 8261, 4608, 3368, 368, 
             4568, 516, 8134, 1649, 536, 4576, 3632, 8928, 58, 7357, 3267, 389, 5442, 4577, 1936, 3265, 4604, 3080, 7343, 88, 2662, 8425, 
             9989, 1073, 3988, 757, 2132, 4552, 6166, 9158, 8597, 4650, 3816, 3975, 2976, 1087, 2384, 4956, 920, 1484, 4697, 2303, 3309, 
             8473, 429, 9450, 3612, 8116, 8642, 9822, 2052, 1840, 6792, 9987, 3505, 6043, 4902, 9804, 2661, 3476, 4272, 7925, 3235, 7057, 
             8458, 4732, 216, 8888, 9268, 8496, 9853, 3464, 4038, 6326, 2388, 4628, 8009, 5917, 3908, 9746, 548, 8915, 1736, 2743, 7769, 
             5454, 6593, 2937, 4130, 293, 5983, 9733, 9297, 8735, 7039, 8620, 3167, 9047, 4241, 1486, 4796, 9257, 690, 6081, 748, 2301, 
             9898, 5830, 919, 8228, 3990, 3881, 2775, 3005, 5199, 2019, 8388, 6606, 1780, 680, 4733, 6403, 6074, 7735, 5380, 4358, 8528, 
             9927, 1944, 8399, 2994, 16, 5183, 7737, 8205, 5265, 1174, 8092, 2453, 8811, 7335, 6532, 7907, 9916, 8944, 3511, 5127, 5904, 
             5746, 9474, 1247, 4119, 7566, 9118, 2164, 1637, 6319, 7054, 1934, 1130, 8758, 4985, 1214, 497, 5762, 7387, 6619, 576, 6985, 
             917, 5967, 3048, 2961, 8623, 3674, 201, 8787, 5267, 7613, 6289, 1230, 9021, 228, 6596, 7219, 868, 6658, 3280, 4180, 3886, 
             9623, 2427, 7435, 5777, 410, 765, 7765, 9251, 9600, 2004, 9285, 408, 1444, 7637, 3310]

# Task 6: Merge Sort
# Write a function that sorts a list of integers using the merge sort algorithm.
# Print the sorted list.
# ---

# Task 7: Quick Sort
# Write a function that sorts a list of integers using the quick sort algorithm.
# Print the sorted list.
# ---

# Task 8: Find Maximum Value
# Write a function to find and return the maximum value in a list of integers.
# ---

# Task 9: Find Minimum Value
# Write a function to find and return the minimum value in a list of integers.
# ---

# Task 10: Count Occurrences
# Implement a function that counts the occurrences of a specific element in a list of integers.
# ---

# =========================================
# =========================================
# ADVANCED SORTING AND SEARCHING TASKS
# =========================================

# Task 11: Binary Search on Strings
# Implement a binary search to find a target string in a sorted list of strings.
# Return the index of the string if found, or -1 if not found.
# ---

# Task 12: Merge Sort on Strings
# Write a function that sorts a list of strings using the merge sort algorithm.
# Print the sorted list.
# ---

# Task 13: Quick Sort on Custom Objects
# Create a class representing custom objects (e.g., Student with name and age).
# Implement the quick sort algorithm to sort a list of these objects based on a specific attribute (e.g., age or name).
# ---

# Task 14: Reverse List
# Write a function to reverse a list of integers in-place (without using Python's built-in reverse function).
# ---

# Task 15: Unique Elements
# Implement a function that returns a list containing unique elements from a given list of integers.
# ---

# Task 16: Search in Sorted Matrix
# Implement a function to search for a target element in a sorted matrix (matrix is sorted row-wise and column-wise).
# Return True if found, False otherwise.
# ---

# Task 17: Bubble Sort on Strings
# Write a function that sorts a list of strings using the bubble sort algorithm.
# Print the sorted list.
# ---

# Task 18: Selection Sort on Strings
# Write a function that sorts a list of strings using the selection sort algorithm.
# Print the sorted list.
# ---

# Task 19: Insertion Sort on Strings
# Write a function that sorts a list of strings using the insertion sort algorithm.
# Print the sorted list.
# ---

# Task 20: Custom Sorting Algorithm
# Design and implement your own custom sorting algorithm and use it to sort a list of integers.
# Compare its performance to other sorting algorithms.
# ---





